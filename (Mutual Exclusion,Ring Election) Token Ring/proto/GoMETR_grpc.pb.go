// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/GoMETR.proto

package GoMETR

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// METRClient is the client API for METR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type METRClient interface {
	PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
}

type mETRClient struct {
	cc grpc.ClientConnInterface
}

func NewMETRClient(cc grpc.ClientConnInterface) METRClient {
	return &mETRClient{cc}
}

func (c *mETRClient) PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoMETR.METR/PassToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// METRServer is the server API for METR service.
// All implementations must embed UnimplementedMETRServer
// for forward compatibility
type METRServer interface {
	PassToken(context.Context, *Token) (*Empty, error)
	mustEmbedUnimplementedMETRServer()
}

// UnimplementedMETRServer must be embedded to have forward compatible implementations.
type UnimplementedMETRServer struct {
}

func (UnimplementedMETRServer) PassToken(context.Context, *Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassToken not implemented")
}
func (UnimplementedMETRServer) mustEmbedUnimplementedMETRServer() {}

// UnsafeMETRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to METRServer will
// result in compilation errors.
type UnsafeMETRServer interface {
	mustEmbedUnimplementedMETRServer()
}

func RegisterMETRServer(s grpc.ServiceRegistrar, srv METRServer) {
	s.RegisterService(&METR_ServiceDesc, srv)
}

func _METR_PassToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(METRServer).PassToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoMETR.METR/PassToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(METRServer).PassToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// METR_ServiceDesc is the grpc.ServiceDesc for METR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var METR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoMETR.METR",
	HandlerType: (*METRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PassToken",
			Handler:    _METR_PassToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GoMETR.proto",
}
