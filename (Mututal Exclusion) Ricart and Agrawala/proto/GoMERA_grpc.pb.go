// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/GoMERA.proto

package GoMERA

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MERAClient is the client API for MERA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MERAClient interface {
	Recv(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Empty, error)
}

type mERAClient struct {
	cc grpc.ClientConnInterface
}

func NewMERAClient(cc grpc.ClientConnInterface) MERAClient {
	return &mERAClient{cc}
}

func (c *mERAClient) Recv(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoMERA.MERA/Recv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MERAServer is the server API for MERA service.
// All implementations must embed UnimplementedMERAServer
// for forward compatibility
type MERAServer interface {
	Recv(context.Context, *Post) (*Empty, error)
	mustEmbedUnimplementedMERAServer()
}

// UnimplementedMERAServer must be embedded to have forward compatible implementations.
type UnimplementedMERAServer struct {
}

func (UnimplementedMERAServer) Recv(context.Context, *Post) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedMERAServer) mustEmbedUnimplementedMERAServer() {}

// UnsafeMERAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MERAServer will
// result in compilation errors.
type UnsafeMERAServer interface {
	mustEmbedUnimplementedMERAServer()
}

func RegisterMERAServer(s grpc.ServiceRegistrar, srv MERAServer) {
	s.RegisterService(&MERA_ServiceDesc, srv)
}

func _MERA_Recv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MERAServer).Recv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoMERA.MERA/Recv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MERAServer).Recv(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

// MERA_ServiceDesc is the grpc.ServiceDesc for MERA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MERA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoMERA.MERA",
	HandlerType: (*MERAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recv",
			Handler:    _MERA_Recv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GoMERA.proto",
}
