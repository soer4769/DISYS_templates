// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/GoArm.proto

package GoArm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArmClient is the client API for Arm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArmClient interface {
	SetNum(ctx context.Context, in *In, opts ...grpc.CallOption) (*Empty, error)
	GetNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Out, error)
}

type armClient struct {
	cc grpc.ClientConnInterface
}

func NewArmClient(cc grpc.ClientConnInterface) ArmClient {
	return &armClient{cc}
}

func (c *armClient) SetNum(ctx context.Context, in *In, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoArm.Arm/SetNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *armClient) GetNum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/GoArm.Arm/GetNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArmServer is the server API for Arm service.
// All implementations must embed UnimplementedArmServer
// for forward compatibility
type ArmServer interface {
	SetNum(context.Context, *In) (*Empty, error)
	GetNum(context.Context, *Empty) (*Out, error)
	mustEmbedUnimplementedArmServer()
}

// UnimplementedArmServer must be embedded to have forward compatible implementations.
type UnimplementedArmServer struct {
}

func (UnimplementedArmServer) SetNum(context.Context, *In) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNum not implemented")
}
func (UnimplementedArmServer) GetNum(context.Context, *Empty) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNum not implemented")
}
func (UnimplementedArmServer) mustEmbedUnimplementedArmServer() {}

// UnsafeArmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArmServer will
// result in compilation errors.
type UnsafeArmServer interface {
	mustEmbedUnimplementedArmServer()
}

func RegisterArmServer(s grpc.ServiceRegistrar, srv ArmServer) {
	s.RegisterService(&Arm_ServiceDesc, srv)
}

func _Arm_SetNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(In)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmServer).SetNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoArm.Arm/SetNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmServer).SetNum(ctx, req.(*In))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arm_GetNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmServer).GetNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoArm.Arm/GetNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmServer).GetNum(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Arm_ServiceDesc is the grpc.ServiceDesc for Arm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Arm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoArm.Arm",
	HandlerType: (*ArmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNum",
			Handler:    _Arm_SetNum_Handler,
		},
		{
			MethodName: "GetNum",
			Handler:    _Arm_GetNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GoArm.proto",
}
