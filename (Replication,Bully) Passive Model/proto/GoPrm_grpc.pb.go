// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/GoPrm.proto

package GoPrm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrmClient is the client API for Prm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrmClient interface {
	Elect(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	GetPrimary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Primary, error)
	AddToLog(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	AddVal(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
}

type prmClient struct {
	cc grpc.ClientConnInterface
}

func NewPrmClient(cc grpc.ClientConnInterface) PrmClient {
	return &prmClient{cc}
}

func (c *prmClient) Elect(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoPrm.Prm/Elect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prmClient) GetPrimary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Primary, error) {
	out := new(Primary)
	err := c.cc.Invoke(ctx, "/GoPrm.Prm/GetPrimary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prmClient) AddToLog(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoPrm.Prm/AddToLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prmClient) AddVal(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoPrm.Prm/AddVal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrmServer is the server API for Prm service.
// All implementations must embed UnimplementedPrmServer
// for forward compatibility
type PrmServer interface {
	Elect(context.Context, *Task) (*Empty, error)
	GetPrimary(context.Context, *Empty) (*Primary, error)
	AddToLog(context.Context, *Task) (*Empty, error)
	AddVal(context.Context, *Task) (*Empty, error)
	mustEmbedUnimplementedPrmServer()
}

// UnimplementedPrmServer must be embedded to have forward compatible implementations.
type UnimplementedPrmServer struct {
}

func (UnimplementedPrmServer) Elect(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Elect not implemented")
}
func (UnimplementedPrmServer) GetPrimary(context.Context, *Empty) (*Primary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrimary not implemented")
}
func (UnimplementedPrmServer) AddToLog(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToLog not implemented")
}
func (UnimplementedPrmServer) AddVal(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVal not implemented")
}
func (UnimplementedPrmServer) mustEmbedUnimplementedPrmServer() {}

// UnsafePrmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrmServer will
// result in compilation errors.
type UnsafePrmServer interface {
	mustEmbedUnimplementedPrmServer()
}

func RegisterPrmServer(s grpc.ServiceRegistrar, srv PrmServer) {
	s.RegisterService(&Prm_ServiceDesc, srv)
}

func _Prm_Elect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrmServer).Elect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoPrm.Prm/Elect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrmServer).Elect(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prm_GetPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrmServer).GetPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoPrm.Prm/GetPrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrmServer).GetPrimary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prm_AddToLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrmServer).AddToLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoPrm.Prm/AddToLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrmServer).AddToLog(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prm_AddVal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrmServer).AddVal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoPrm.Prm/AddVal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrmServer).AddVal(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

// Prm_ServiceDesc is the grpc.ServiceDesc for Prm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoPrm.Prm",
	HandlerType: (*PrmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Elect",
			Handler:    _Prm_Elect_Handler,
		},
		{
			MethodName: "GetPrimary",
			Handler:    _Prm_GetPrimary_Handler,
		},
		{
			MethodName: "AddToLog",
			Handler:    _Prm_AddToLog_Handler,
		},
		{
			MethodName: "AddVal",
			Handler:    _Prm_AddVal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GoPrm.proto",
}
