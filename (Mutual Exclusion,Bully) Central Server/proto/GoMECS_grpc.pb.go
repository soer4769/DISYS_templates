// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/GoMECS.proto

package GoMECS

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MECSClient is the client API for MECS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MECSClient interface {
	Request(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Empty, error)
	Release(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Empty, error)
	Elect(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
}

type mECSClient struct {
	cc grpc.ClientConnInterface
}

func NewMECSClient(cc grpc.ClientConnInterface) MECSClient {
	return &mECSClient{cc}
}

func (c *mECSClient) Request(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoMECS.MECS/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mECSClient) Release(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoMECS.MECS/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mECSClient) Elect(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GoMECS.MECS/Elect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MECSServer is the server API for MECS service.
// All implementations must embed UnimplementedMECSServer
// for forward compatibility
type MECSServer interface {
	Request(context.Context, *Query) (*Empty, error)
	Release(context.Context, *Query) (*Empty, error)
	Elect(context.Context, *Task) (*Empty, error)
	mustEmbedUnimplementedMECSServer()
}

// UnimplementedMECSServer must be embedded to have forward compatible implementations.
type UnimplementedMECSServer struct {
}

func (UnimplementedMECSServer) Request(context.Context, *Query) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedMECSServer) Release(context.Context, *Query) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedMECSServer) Elect(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Elect not implemented")
}
func (UnimplementedMECSServer) mustEmbedUnimplementedMECSServer() {}

// UnsafeMECSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MECSServer will
// result in compilation errors.
type UnsafeMECSServer interface {
	mustEmbedUnimplementedMECSServer()
}

func RegisterMECSServer(s grpc.ServiceRegistrar, srv MECSServer) {
	s.RegisterService(&MECS_ServiceDesc, srv)
}

func _MECS_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MECSServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoMECS.MECS/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MECSServer).Request(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _MECS_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MECSServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoMECS.MECS/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MECSServer).Release(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _MECS_Elect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MECSServer).Elect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoMECS.MECS/Elect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MECSServer).Elect(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

// MECS_ServiceDesc is the grpc.ServiceDesc for MECS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MECS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoMECS.MECS",
	HandlerType: (*MECSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _MECS_Request_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _MECS_Release_Handler,
		},
		{
			MethodName: "Elect",
			Handler:    _MECS_Elect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GoMECS.proto",
}
